trigger:
  branches:
    include:
      - feature/*
      - master
      - release/*

  paths:
    include:
      - apps/MFE/seo-metadata
    exclude:
      - /

resources:
  repositories:
    - repository: AmidoEcommerce
      type: git
      name: Amido.Ecommerce.Infrastructure/Amido.Ecommerce.Infrastructure.Templates

variables:
  # Global Variables
  - name: project
    value: seo-metadata-ui'
  - name: tag
    value: '$(Build.BuildId)'
  - name: namespace
    value: 'seometadata'
  # Registrys
  - name: registryName_sx
    value: ecmbrowse01acrsxeuw
  - name: registryName_ci
    value: ecmbrowse01acrcieuw
  - name: registryName_pp
    value: ecmbrowse01acrppeuw
  - name: registryName_pd
    value: ecmbrowse01acrpdeuw
  # Subscriptions
  - name: sx_subscription
    value: 'ecmbrowse01spnsxeuw'
  - name: ci_subscription
    value: 'ecmbrowse01spncieuw'
  - name: pp_subscription
    value: 'ecmbrowse01spnppeuw'
  - name: pd_subscription
    value: 'ecmbrowse01spnpdeuw'

  # Versioning
  - name: Version.Major
    value: 0
  - name: Version.Minor
    value: 1
  - name: Version.Revision
    value: $[counter(variables['Version.Minor'], 0)]
  # Application
  - name: chart_name
    value: seo-metadata-ui'
  - name: helmOverrides
    value: 'domain=$(ingress_domain),ingress.enabled=true,domain=$(ingress_domain),application.appInsightsKey=$(appInsightsKey),application.apiBaseUrl=$(apiBaseUrl),application.app_serve_path_prefix=$(app_serve_path_prefix),application.generate_sourcemap=$(generate_sourcemap),application.log_level=$(log_level)'
  - name: helm_version
    value: 3.3.1
stages:
  - stage: Prereqs
    displayName: 'Prerequisites'
    jobs:
      - template: azDevOps/azure/templates/jobs/build-updatebuildnumber.yml
        parameters:
          build_number: '$(Version.Major).$(Version.Minor).$(Version.Revision)'

  - stage: Build
    displayName: 'Build'
    dependsOn: Prereqs
    variables:
      #  - group: Veracode
      - group: 'SX.SeoMetadata.Frontend.EUN'
    jobs:
      - template: azDevOps/azure/templates/jobs/build-docker.yml
        parameters:
          projectName: $(project)
          registryName: $(registryName_sx)
          dockerContext: 'apps/MFE/seo-metadata/'
          dockerfile_name: 'Dockerfile'
          nugetRestore: false
          subscription: '$(sx_subscription)'
          service_connection: 'prisma_compute'
          scan_image: 'true'

      - job: Helm_Build
        pool:
          vmImage: 'ubuntu-18.04'
        steps:
          - template: azDevOps/azure/templates/steps/pack-helm.yml # Template reference
            parameters:
              projectName: $(project)
              registryName: $(registryName_sx)
              Subscription: '$(sx_subscription)'
              context: $(system.defaultWorkingDirectory)/apps/MFE/seo-metadata/charts/seo-metadata-ui/

  - stage: ConventionalCommit
    displayName: 'Conventional Commit'
    variables:
      - group: 'ConventionalCommit'
    dependsOn: Build
    condition:
      and( succeeded('Build'), and (eq(variables['Build.Reason'], 'IndividualCI'),
      contains(variables['Build.SourceBranch'], 'master'), contains(variables['Build.SourceVersionMessage'], 'Merged
      PR') ) )
    jobs:
      - template: azDevOps/azure/templates/jobs/conventional-commit.yml
        parameters:
          service_connection: 'ecmbrowse01spnsxeuw'
          pat: $(cc_pat)

  - stage: deploy_sandbox_eun
    displayName: 'Deploy Sandbox EUN'
    dependsOn: Build
    condition: and(succeeded('Build'), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.Reason'], 'Manual'))))
    variables:
      - group: 'SX.SeoMetadata.Frontend.EUN'
      - group: 'Sandbox.Akamai.Purge'
    jobs:
      - template: azDevOps/azure/templates/jobs/deploy-helm.yml
        parameters:
          environmentName: 'sx'
          # Platform Authentication
          kubernetes_service_connection: 'Kubernetes_Sandbox.eCommerce_Browse01_EUN'
          acr_service_connection: '$(sx_subscription)'
          # Registry Configuration
          registry_name: $(registryName_sx)
          registry_login: '$(registryLogin)'
          registry_pass: '$(registryPassword)'
          # Resource Configuration
          helm_version: $(helm_version)
          chart_name: $(chart_name)
          overrides: $(helmOverrides)
          namespace: $(namespace)
          purge_cache: 'true'
          akamai_access_token: $(akamai_access_token)
          akamai_client_secret: $(akamai_client_secret)
          akamai_client_token: $(akamai_client_token)
          akamai_host: $(akamai_host)
          purge_tags: 'sx-seometadata'
          akamai_edgerc_path: apps/MFE/seo-metadata/akamai.edgerc

  - stage: deploy_sandbox_euw
    displayName: 'Deploy Sandbox EUW'
    dependsOn: Build
    condition: and(succeeded('Build'), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.Reason'], 'Manual'))))
    variables:
      - group: 'SX.SeoMetadata.Frontend.EUW'
      - group: 'Sandbox.Akamai.Purge'
    jobs:
      - template: azDevOps/azure/templates/jobs/deploy-helm.yml
        parameters:
          environmentName: 'sx'
          # Platform Authentication
          kubernetes_service_connection: 'Kubernetes_Sandbox.eCommerce_Browse01_EUW'
          acr_service_connection: '$(sx_subscription)'
          # Registry Configuration
          registry_name: $(registryName_sx)
          registry_login: '$(registryLogin)'
          registry_pass: '$(registryPassword)'
          # Resource Configuration
          helm_version: $(helm_version)
          chart_name: $(chart_name)
          overrides: $(helmOverrides)
          namespace: $(namespace)
          purge_cache: 'true'
          akamai_access_token: $(akamai_access_token)
          akamai_client_secret: $(akamai_client_secret)
          akamai_client_token: $(akamai_client_token)
          akamai_host: $(akamai_host)
          purge_tags: 'sx-seometadata'
          akamai_edgerc_path: apps/MFE/seo-metadata/akamai.edgerc

  - stage: promote_ci
    displayName: 'Promote to CI'
    dependsOn:
      - Build
      - deploy_sandbox_eun
      - deploy_sandbox_euw
    condition:
      and(succeeded('Build'), or(and(succeeded('deploy_sandbox_eun'), succeeded('deploy_sandbox_euw'),
      eq(variables['Build.SourceBranch'], 'refs/heads/master')), startsWith(variables['Build.SourceBranch'],
      'refs/heads/release/')))
    jobs:
      - template: azDevOps/azure/templates/jobs/promote-container.yml
        parameters:
          source_container_name: $(project)
          destination_container_name: $(project)
          source_acr: $(registryName_sx)
          destination_acr: $(registryName_ci)
          source_subscription: '$(sx_subscription)'
          destination_subscription: '$(ci_subscription)'
          tag: $(Build.BuildNumber)

  - stage: deploy_ci_eun
    displayName: 'Deploy CI EUN'
    dependsOn: promote_ci
    condition: succeeded('promote_ci')
    variables:
      - group: 'CI.SeoMetadata.Frontend.EUN'
      - group: 'CI.Akamai.Purge'
    jobs:
      - template: azDevOps/azure/templates/jobs/deploy-helm.yml
        parameters:
          environmentName: 'ci'
          kubernetes_service_connection: 'Kubernetes_CI.eCommerce_Browse01_EUN'
          registry_name: $(registryName_ci)
          registry_login: '$(registryLogin)'
          registry_pass: '$(registryPassword)'
          helm_version: $(helm_version)
          chart_name: $(chart_name)
          overrides: $(helmOverrides)
          namespace: $(namespace)
          acr_service_connection: '$(ci_subscription)'
          purge_cache: 'true'
          akamai_access_token: $(akamai_access_token)
          akamai_client_secret: $(akamai_client_secret)
          akamai_client_token: $(akamai_client_token)
          akamai_host: $(akamai_host)
          purge_tags: 'ci-seometadata'
          akamai_edgerc_path: apps/MFE/seo-metadata/akamai.edgerc

  - stage: deploy_ci_euw
    displayName: 'Deploy CI EUW'
    dependsOn: promote_ci
    condition: succeeded('promote_ci')
    variables:
      - group: 'CI.SeoMetadata.Frontend.EUW'
      - group: 'CI.Akamai.Purge'
    jobs:
      - template: azDevOps/azure/templates/jobs/deploy-helm.yml
        parameters:
          environmentName: 'ci'
          kubernetes_service_connection: 'Kubernetes_CI.eCommerce_Browse01_EUW'
          registry_name: $(registryName_ci)
          registry_login: '$(registryLogin)'
          registry_pass: '$(registryPassword)'
          helm_version: $(helm_version)
          chart_name: $(chart_name)
          overrides: $(helmOverrides)
          namespace: $(namespace)
          acr_service_connection: '$(ci_subscription)'
          purge_cache: 'true'
          akamai_access_token: $(akamai_access_token)
          akamai_client_secret: $(akamai_client_secret)
          akamai_client_token: $(akamai_client_token)
          akamai_host: $(akamai_host)
          purge_tags: 'ci-seometadata'
          akamai_edgerc_path: apps/MFE/seo-metadata/akamai.edgerc

    # Promote To PP ACR
  - stage: promote_preprod
    displayName: 'Promote to Pre-Prod'
    dependsOn:
      - Build
      - deploy_ci_eun
      - deploy_ci_euw
    condition:
      and(succeeded('Build'), succeeded('deploy_ci_eun'), succeeded('deploy_ci_euw'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
    jobs:
      - template: azDevOps/azure/templates/jobs/promote-container.yml
        parameters:
          source_container_name: $(project)
          destination_container_name: $(project)
          source_acr: $(registryName_ci)
          destination_acr: $(registryName_pp)
          source_subscription: '$(ci_subscription)'
          destination_subscription: '$(pp_subscription)'
          tag: $(Build.BuildNumber)

  - stage: deploy_preprod_eun
    displayName: 'Deploy PreProd EUN'
    dependsOn: promote_preprod
    condition: succeeded('promote_preprod')
    variables:
      - group: 'PP.SeoMetadata.Frontend.EUN'
      - group: 'PP.Akamai.Purge'
    jobs:
      - template: azDevOps/azure/templates/jobs/deploy-helm.yml
        parameters:
          environmentName: 'pp'
          kubernetes_service_connection: 'Kubernetes_PreProd.eCommerce_Browse01_EUN'
          registry_name: $(registryName_pp)
          registry_login: '$(registryLogin)'
          registry_pass: '$(registryPassword)'
          helm_version: $(helm_version)
          chart_name: $(chart_name)
          overrides: $(helmOverrides)
          namespace: $(namespace)
          acr_service_connection: '$(pp_subscription)'
          purge_cache: 'true'
          akamai_access_token: $(akamai_access_token)
          akamai_client_secret: $(akamai_client_secret)
          akamai_client_token: $(akamai_client_token)
          akamai_host: $(akamai_host)
          purge_tags: 'pp-seometadata'
          akamai_edgerc_path: apps/MFE/seo-metadata/akamai.edgerc

  - stage: deploy_preprod_euw
    displayName: 'Deploy PreProd EUW'
    dependsOn: promote_preprod
    condition: succeeded('promote_preprod')
    variables:
      - group: 'PP.SeoMetadata.Frontend.EUW'
      - group: 'PP.Akamai.Purge'
    jobs:
      - template: azDevOps/azure/templates/jobs/deploy-helm.yml
        parameters:
          environmentName: 'pp'
          kubernetes_service_connection: 'Kubernetes_PreProd.eCommerce_Browse01_EUW'
          registry_name: $(registryName_pp)
          registry_login: '$(registryLogin)'
          registry_pass: '$(registryPassword)'
          helm_version: $(helm_version)
          chart_name: $(chart_name)
          overrides: $(helmOverrides)
          namespace: $(namespace)
          acr_service_connection: '$(pp_subscription)'
          purge_cache: 'true'
          akamai_access_token: $(akamai_access_token)
          akamai_client_secret: $(akamai_client_secret)
          akamai_client_token: $(akamai_client_token)
          akamai_host: $(akamai_host)
          purge_tags: 'pp-seometadata'
          akamai_edgerc_path: apps/MFE/seo-metadata/akamai.edgerc

  - stage: 'Create_ServiceNow_Change'
    displayName: 'Raise ServiceNow Change'
    dependsOn:
      - Build
      - deploy_preprod_eun
      - deploy_preprod_euw
    condition:
      and(succeeded('Build'), succeeded('deploy_preprod_eun'), succeeded('deploy_preprod_euw'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
    variables:
      - group: 'ServiceNow'
      - name: 'Environment'
        value: 'Production'
    jobs:
      - deployment: ServiceNowChangeRaise
        environment: 'pd'
      - job: servicenow_raise_change
        displayName: 'Raise Change'
        steps:
          - task: ServiceNow-Change-Rasiser@0
            inputs:
              apiEndpoint: $(snowApi)
              deploymentsDictionaryAPI: $(deploymentsApi)
              buildNumber: '$(Build.BuildId)' #Must match in both stages
              currentRepository: '$(Build.Repository.Name)' #Must match in both stages
              deploymentEnvironment: '$(Environment)' #Must match in both stages
              apiUser: $(snowUsername)
              apiPassword: $(snowPassword)
              snShortDescription: 'Deployment of $(Build.Repository.Name) to $(Environment) AKS Clusters'
              snDescription: 'Deploy Release $(Build.BuildId) of the Cloud Based SEO Metadata Service onto the
                Production AKS clusters (ecombrowse01akspdeun/ecmbrowse01akspdeuw).' #Commit message gets inserted as the description
              snJustification:
                'This change is required to allow the automated update of $(Build.Repository.Name) onto $(Environment)'
              snCategory: 'Applications Software'
              snTestPlan:
                'This change has been tested on the UAT and Conv environments. Once this has been deployed onto
                $(Environment), our QA team will carry out any testing that is required and provide signoff.'
              snRiskImpactAnalaysis: 'Any issues could mean that the SEO Metadata does not function correctly.'
              snImplementationPlan:
                'The pipeline will continue to run once this change is approved -
                $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/?buildId=$(Build.BuildId). This will
                deploy $(Build.Repository.Name) onto $(Environment). The pipeline is being run from the following branch
                - $(Build.SourceBranch).'
              snBackoutPlan:
                'The current working release will be redeployed onto $(Environment) and the QA team will re-test to
                ensure that we are back to a working state.'
              snAssignmentGroup: 'eCommerce'
              snCmdbCi: amido.com'

  - stage: 'Check_ServiceNow_Change'
    displayName: 'Check ServiceNow Change'
    dependsOn:
      - Create_ServiceNow_Change
    condition: succeeded('Create_ServiceNow_Change')
    variables:
      - group: 'ServiceNow'
      - name: 'Environment'
        value: 'Production'
    jobs:
      - deployment: 'ServiceNowChangeCheck'
        environment: 'pd'
      - job: servicenow_change_status_check
        displayName: 'Check Change Status on ServiceNow'
        steps:
          - task: ServiceNow-Change-Status-Checker@0
            inputs:
              apiEndpoint: $(snowApi)
              deploymentsDictionaryAPI: $(deploymentsApi)
              buildNumber: '$(Build.BuildId)' #Must match in both stages
              currentRepository: '$(Build.Repository.Name)' #Must match in both stages
              deploymentEnvironment: '$(Environment)' #Must match in both stages
              apiUser: '$(snowUsername)'
              apiPassword: '$(snowPassword)'

  - stage: promote_prod
    displayName: 'Promote to Prod'
    dependsOn:
      - Check_ServiceNow_Change
    condition: succeeded('Check_ServiceNow_Change')
    jobs:
      - template: azDevOps/azure/templates/jobs/promote-container.yml
        parameters:
          source_container_name: $(project)
          destination_container_name: $(project)
          source_acr: $(registryName_pp)
          destination_acr: $(registryName_pd)
          source_subscription: '$(pp_subscription)'
          destination_subscription: '$(pd_subscription)'
          tag: $(Build.BuildNumber)

  - stage: deploy_prod_eun
    displayName: 'Deploy Prod EUN'
    dependsOn: promote_prod
    condition: succeeded('promote_prod')
    variables:
      - group: 'PD.SeoMetadata.Frontend.EUN'
      - group: 'PD.Akamai.Purge'
    jobs:
      - template: azDevOps/azure/templates/jobs/deploy-helm.yml
        parameters:
          environmentName: 'pd'
          kubernetes_service_connection: 'Kubernetes_Prod.eCommerce_Browse01_EUN'
          registry_name: $(registryName_pd)
          registry_login: '$(registryLogin)'
          registry_pass: '$(registryPassword)'
          helm_version: $(helm_version)
          chart_name: $(chart_name)
          overrides: $(helmOverrides)
          namespace: $(namespace)
          acr_service_connection: '$(pd_subscription)'
          purge_cache: 'true'
          akamai_access_token: $(akamai-purge-access-token)
          akamai_client_secret: $(akamai-purge-client-secret)
          akamai_client_token: $(akamai-purge-client-token)
          akamai_host: $(akamai-purge-host)
          purge_tags: 'pd-seometadata'
          akamai_edgerc_path: apps/MFE/seo-metadata/akamai.edgerc

  - stage: deploy_prod_euw
    displayName: 'Deploy Prod EUW'
    dependsOn:
      - promote_prod
      - deploy_prod_eun
    condition: and(succeeded('promote_prod'), succeeded('deploy_prod_eun')) # Requires EUN deployment so we never have both regions down at the same time
    variables:
      - group: 'PD.SeoMetadata.Frontend.EUW'
      - group: 'PD.Akamai.Purge'
    jobs:
      - template: azDevOps/azure/templates/jobs/deploy-helm.yml
        parameters:
          environmentName: 'pd'
          kubernetes_service_connection: 'Kubernetes_Prod.eCommerce_Browse01_EUW'
          registry_name: $(registryName_pd)
          registry_login: '$(registryLogin)'
          registry_pass: '$(registryPassword)'
          helm_version: $(helm_version)
          chart_name: $(chart_name)
          overrides: $(helmOverrides)
          namespace: $(namespace)
          acr_service_connection: '$(pd_subscription)'
          purge_cache: 'true'
          akamai_access_token: $(akamai-purge-access-token)
          akamai_client_secret: $(akamai-purge-client-secret)
          akamai_client_token: $(akamai-purge-client-token)
          akamai_host: $(akamai-purge-host)
          purge_tags: 'pd-seometadata'
          akamai_edgerc_path: apps/MFE/seo-metadata/akamai.edgerc
